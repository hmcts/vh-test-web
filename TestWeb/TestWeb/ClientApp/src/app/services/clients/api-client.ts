/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable({
    providedIn: 'root'
})
export class ApiClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "https://https://localhost:5500";
    }

    /**
     * Allocate single user
     * @param body (optional) Details of the required allocation
     * @return Success
     */
    allocateUser(body: AllocateUserRequest | undefined): Observable<UserDetailsResponse> {
        let url_ = this.baseUrl + "/allocations/allocateUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("patch", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAllocateUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAllocateUser(<any>response_);
                } catch (e) {
                    return <Observable<UserDetailsResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<UserDetailsResponse>><any>_observableThrow(response_);
        }));
    }

    protected processAllocateUser(response: HttpResponseBase): Observable<UserDetailsResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserDetailsResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserDetailsResponse>(<any>null);
    }

    /**
     * Allocate multiple users
     * @param body (optional) Allocate users request
     * @return Success
     */
    allocateUsers(body: AllocateUsersRequest | undefined): Observable<UserDetailsResponse[]> {
        let url_ = this.baseUrl + "/allocations/allocateUsers";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("patch", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAllocateUsers(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAllocateUsers(<any>response_);
                } catch (e) {
                    return <Observable<UserDetailsResponse[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<UserDetailsResponse[]>><any>_observableThrow(response_);
        }));
    }

    protected processAllocateUsers(response: HttpResponseBase): Observable<UserDetailsResponse[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(UserDetailsResponse.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserDetailsResponse[]>(<any>null);
    }

    /**
     * Unallocate users by username
     * @param body (optional) List of usernames to unallocate
     * @return Success
     */
    unallocateUsers(body: UnallocateUsersRequest | undefined): Observable<AllocationDetailsResponse[]> {
        let url_ = this.baseUrl + "/allocations/unallocateUsers";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("patch", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUnallocateUsers(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUnallocateUsers(<any>response_);
                } catch (e) {
                    return <Observable<AllocationDetailsResponse[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<AllocationDetailsResponse[]>><any>_observableThrow(response_);
        }));
    }

    protected processUnallocateUsers(response: HttpResponseBase): Observable<AllocationDetailsResponse[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(AllocationDetailsResponse.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<AllocationDetailsResponse[]>(<any>null);
    }

    /**
     * Get allocated users by allocatedBy
     * @param username Username of the user that has allocated users
     * @return Success
     */
    allocatedUsers(username: string): Observable<AllocationDetailsResponse[]> {
        let url_ = this.baseUrl + "/allocations/allocatedUsers/{username}";
        if (username === undefined || username === null)
            throw new Error("The parameter 'username' must be defined.");
        url_ = url_.replace("{username}", encodeURIComponent("" + username));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAllocatedUsers(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAllocatedUsers(<any>response_);
                } catch (e) {
                    return <Observable<AllocationDetailsResponse[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<AllocationDetailsResponse[]>><any>_observableThrow(response_);
        }));
    }

    protected processAllocatedUsers(response: HttpResponseBase): Observable<AllocationDetailsResponse[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(AllocationDetailsResponse.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<AllocationDetailsResponse[]>(<any>null);
    }

    /**
     * Create video event
     * @param body (optional) Conference event request
     * @return Success
     */
    createVideoEvent(body: ConferenceEventRequest | undefined): Observable<void> {
        let url_ = this.baseUrl + "/conferences/events";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateVideoEvent(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateVideoEvent(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processCreateVideoEvent(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * Get conferences for today
     * @return Success
     */
    getConferencesForToday(): Observable<ConferenceResponse[]> {
        let url_ = this.baseUrl + "/conferences/conferences";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetConferencesForToday(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetConferencesForToday(<any>response_);
                } catch (e) {
                    return <Observable<ConferenceResponse[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<ConferenceResponse[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetConferencesForToday(response: HttpResponseBase): Observable<ConferenceResponse[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ConferenceResponse.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ConferenceResponse[]>(<any>null);
    }

    /**
     * Get the details of a conference by hearing ref id
     * @param hearingRefId Hearing ref Id of the conference
     * @return Success
     */
    getConferenceByHearingRefId(hearingRefId: string): Observable<ConferenceResponse> {
        let url_ = this.baseUrl + "/conferences/hearings/{hearingRefId}";
        if (hearingRefId === undefined || hearingRefId === null)
            throw new Error("The parameter 'hearingRefId' must be defined.");
        url_ = url_.replace("{hearingRefId}", encodeURIComponent("" + hearingRefId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetConferenceByHearingRefId(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetConferenceByHearingRefId(<any>response_);
                } catch (e) {
                    return <Observable<ConferenceResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<ConferenceResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetConferenceByHearingRefId(response: HttpResponseBase): Observable<ConferenceResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ConferenceResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ConferenceResponse>(<any>null);
    }

    /**
     * Get the configuration settings for client
     * @return Success
     */
    getClientConfigurationSettings(): Observable<ClientSettingsResponse> {
        let url_ = this.baseUrl + "/config";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetClientConfigurationSettings(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetClientConfigurationSettings(<any>response_);
                } catch (e) {
                    return <Observable<ClientSettingsResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<ClientSettingsResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetClientConfigurationSettings(response: HttpResponseBase): Observable<ClientSettingsResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ClientSettingsResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ClientSettingsResponse>(<any>null);
    }

    /**
     * Check Service Health
     * @return Success
     */
    checkServiceHealth(): Observable<HealthCheckResponse> {
        let url_ = this.baseUrl + "/health/health";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCheckServiceHealth(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCheckServiceHealth(<any>response_);
                } catch (e) {
                    return <Observable<HealthCheckResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<HealthCheckResponse>><any>_observableThrow(response_);
        }));
    }

    protected processCheckServiceHealth(response: HttpResponseBase): Observable<HealthCheckResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = HealthCheckResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = HealthCheckResponse.fromJS(resultData500);
            return throwException("Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HealthCheckResponse>(<any>null);
    }

    /**
     * Check Service Health
     * @return Success
     */
    checkServiceHealth2(): Observable<HealthCheckResponse> {
        let url_ = this.baseUrl + "/health/liveness";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCheckServiceHealth2(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCheckServiceHealth2(<any>response_);
                } catch (e) {
                    return <Observable<HealthCheckResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<HealthCheckResponse>><any>_observableThrow(response_);
        }));
    }

    protected processCheckServiceHealth2(response: HttpResponseBase): Observable<HealthCheckResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = HealthCheckResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = HealthCheckResponse.fromJS(resultData500);
            return throwException("Server Error", status, _responseText, _headers, result500);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HealthCheckResponse>(<any>null);
    }

    /**
     * Create a hearing
     * @param body (optional) Details on the new hearing
     * @return Success
     */
    hearings(body: CreateHearingRequest | undefined): Observable<HearingDetailsResponse> {
        let url_ = this.baseUrl + "/hearings";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processHearings(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHearings(<any>response_);
                } catch (e) {
                    return <Observable<HearingDetailsResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<HearingDetailsResponse>><any>_observableThrow(response_);
        }));
    }

    protected processHearings(response: HttpResponseBase): Observable<HearingDetailsResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = HearingDetailsResponse.fromJS(resultData201);
            return _observableOf(result201);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HearingDetailsResponse>(<any>null);
    }

    /**
     * Confirm hearing by id
     * @param hearingId Id of the hearing
     * @param body (optional) Update the booking status details
     * @return Success
     */
    confirmHearingById(hearingId: string, body: UpdateBookingStatusRequest | undefined): Observable<ConferenceDetailsResponse> {
        let url_ = this.baseUrl + "/hearings/{hearingId}";
        if (hearingId === undefined || hearingId === null)
            throw new Error("The parameter 'hearingId' must be defined.");
        url_ = url_.replace("{hearingId}", encodeURIComponent("" + hearingId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("patch", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processConfirmHearingById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processConfirmHearingById(<any>response_);
                } catch (e) {
                    return <Observable<ConferenceDetailsResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<ConferenceDetailsResponse>><any>_observableThrow(response_);
        }));
    }

    protected processConfirmHearingById(response: HttpResponseBase): Observable<ConferenceDetailsResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = ConferenceDetailsResponse.fromJS(resultData201);
            return _observableOf(result201);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ConferenceDetailsResponse>(<any>null);
    }

    /**
     * Delete hearings by partial case name or number
     * @param body (optional) Partial case name or number text for the hearing
     * @return Success
     */
    removeTestData(body: DeleteTestHearingDataRequest | undefined): Observable<DeletedResponse> {
        let url_ = this.baseUrl + "/hearings/removeTestData";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRemoveTestData(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemoveTestData(<any>response_);
                } catch (e) {
                    return <Observable<DeletedResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<DeletedResponse>><any>_observableThrow(response_);
        }));
    }

    protected processRemoveTestData(response: HttpResponseBase): Observable<DeletedResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DeletedResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<DeletedResponse>(<any>null);
    }

    /**
     * Get all hearings by createdBy
     * @param createdBy The user that created the hearing
     * @return Success
     */
    getAllHearingsByCreatedBy(createdBy: string): Observable<HearingResponse[]> {
        let url_ = this.baseUrl + "/hearings/hearings/{createdBy}";
        if (createdBy === undefined || createdBy === null)
            throw new Error("The parameter 'createdBy' must be defined.");
        url_ = url_.replace("{createdBy}", encodeURIComponent("" + createdBy));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllHearingsByCreatedBy(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllHearingsByCreatedBy(<any>response_);
                } catch (e) {
                    return <Observable<HearingResponse[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<HearingResponse[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllHearingsByCreatedBy(response: HttpResponseBase): Observable<HearingResponse[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(HearingResponse.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HearingResponse[]>(<any>null);
    }

    /**
     * Reset user password
     * @param body (optional) Details of the user to reset
     * @return Success
     */
    password(body: ResetUserPasswordRequest | undefined): Observable<UpdateUserResponse> {
        let url_ = this.baseUrl + "/users/password";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("patch", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPassword(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPassword(<any>response_);
                } catch (e) {
                    return <Observable<UpdateUserResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<UpdateUserResponse>><any>_observableThrow(response_);
        }));
    }

    protected processPassword(response: HttpResponseBase): Observable<UpdateUserResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UpdateUserResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UpdateUserResponse>(<any>null);
    }

    /**
     * Get profile for logged in user
     * @return Success
     */
    getUserProfile(): Observable<UserProfileResponse> {
        let url_ = this.baseUrl + "/profile";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUserProfile(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUserProfile(<any>response_);
                } catch (e) {
                    return <Observable<UserProfileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<UserProfileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetUserProfile(response: HttpResponseBase): Observable<UserProfileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserProfileResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Unauthorized", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserProfileResponse>(<any>null);
    }
}

export enum BookingStatus {
    Booked = "Booked",
    Created = "Created",
    Cancelled = "Cancelled",
    Failed = "Failed",
}

export enum LinkedParticipantType {
    Interpreter = "Interpreter",
}

export enum UpdateBookingStatus {
    Created = "Created",
    Cancelled = "Cancelled",
    Failed = "Failed",
}

export class UpdateBookingStatusRequest implements IUpdateBookingStatusRequest {
    updated_by?: string | undefined;
    status?: UpdateBookingStatus;
    cancel_reason?: string | undefined;

    constructor(data?: IUpdateBookingStatusRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.updated_by = _data["updated_by"];
            this.status = _data["status"];
            this.cancel_reason = _data["cancel_reason"];
        }
    }

    static fromJS(data: any): UpdateBookingStatusRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateBookingStatusRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["updated_by"] = this.updated_by;
        data["status"] = this.status;
        data["cancel_reason"] = this.cancel_reason;
        return data; 
    }
}

export interface IUpdateBookingStatusRequest {
    updated_by?: string | undefined;
    status?: UpdateBookingStatus;
    cancel_reason?: string | undefined;
}

export class CaseResponse implements ICaseResponse {
    number?: string | undefined;
    name?: string | undefined;
    is_lead_case?: boolean;

    constructor(data?: ICaseResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.number = _data["number"];
            this.name = _data["name"];
            this.is_lead_case = _data["is_lead_case"];
        }
    }

    static fromJS(data: any): CaseResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CaseResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["number"] = this.number;
        data["name"] = this.name;
        data["is_lead_case"] = this.is_lead_case;
        return data; 
    }
}

export interface ICaseResponse {
    number?: string | undefined;
    name?: string | undefined;
    is_lead_case?: boolean;
}

export class EndpointResponse implements IEndpointResponse {
    id?: string;
    display_name?: string | undefined;
    sip?: string | undefined;
    pin?: string | undefined;
    defence_advocate_id?: string | undefined;

    constructor(data?: IEndpointResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.display_name = _data["display_name"];
            this.sip = _data["sip"];
            this.pin = _data["pin"];
            this.defence_advocate_id = _data["defence_advocate_id"];
        }
    }

    static fromJS(data: any): EndpointResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EndpointResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["display_name"] = this.display_name;
        data["sip"] = this.sip;
        data["pin"] = this.pin;
        data["defence_advocate_id"] = this.defence_advocate_id;
        return data; 
    }
}

export interface IEndpointResponse {
    id?: string;
    display_name?: string | undefined;
    sip?: string | undefined;
    pin?: string | undefined;
    defence_advocate_id?: string | undefined;
}

export class HearingDetailsResponse implements IHearingDetailsResponse {
    id?: string;
    scheduled_date_time?: Date;
    scheduled_duration?: number;
    hearing_venue_name?: string | undefined;
    case_type_name?: string | undefined;
    hearing_type_name?: string | undefined;
    cases?: CaseResponse[] | undefined;
    participants?: ParticipantResponse[] | undefined;
    hearing_room_name?: string | undefined;
    other_information?: string | undefined;
    created_date?: Date;
    created_by?: string | undefined;
    updated_by?: string | undefined;
    updated_date?: Date;
    confirmed_by?: string | undefined;
    confirmed_date?: Date | undefined;
    status?: BookingStatus;
    questionnaire_not_required?: boolean;
    audio_recording_required?: boolean;
    cancel_reason?: string | undefined;
    endpoints?: EndpointResponse[] | undefined;
    group_id?: string | undefined;

    constructor(data?: IHearingDetailsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.scheduled_date_time = _data["scheduled_date_time"] ? new Date(_data["scheduled_date_time"].toString()) : <any>undefined;
            this.scheduled_duration = _data["scheduled_duration"];
            this.hearing_venue_name = _data["hearing_venue_name"];
            this.case_type_name = _data["case_type_name"];
            this.hearing_type_name = _data["hearing_type_name"];
            if (Array.isArray(_data["cases"])) {
                this.cases = [] as any;
                for (let item of _data["cases"])
                    this.cases!.push(CaseResponse.fromJS(item));
            }
            if (Array.isArray(_data["participants"])) {
                this.participants = [] as any;
                for (let item of _data["participants"])
                    this.participants!.push(ParticipantResponse.fromJS(item));
            }
            this.hearing_room_name = _data["hearing_room_name"];
            this.other_information = _data["other_information"];
            this.created_date = _data["created_date"] ? new Date(_data["created_date"].toString()) : <any>undefined;
            this.created_by = _data["created_by"];
            this.updated_by = _data["updated_by"];
            this.updated_date = _data["updated_date"] ? new Date(_data["updated_date"].toString()) : <any>undefined;
            this.confirmed_by = _data["confirmed_by"];
            this.confirmed_date = _data["confirmed_date"] ? new Date(_data["confirmed_date"].toString()) : <any>undefined;
            this.status = _data["status"];
            this.questionnaire_not_required = _data["questionnaire_not_required"];
            this.audio_recording_required = _data["audio_recording_required"];
            this.cancel_reason = _data["cancel_reason"];
            if (Array.isArray(_data["endpoints"])) {
                this.endpoints = [] as any;
                for (let item of _data["endpoints"])
                    this.endpoints!.push(EndpointResponse.fromJS(item));
            }
            this.group_id = _data["group_id"];
        }
    }

    static fromJS(data: any): HearingDetailsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new HearingDetailsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["scheduled_date_time"] = this.scheduled_date_time ? this.scheduled_date_time.toISOString() : <any>undefined;
        data["scheduled_duration"] = this.scheduled_duration;
        data["hearing_venue_name"] = this.hearing_venue_name;
        data["case_type_name"] = this.case_type_name;
        data["hearing_type_name"] = this.hearing_type_name;
        if (Array.isArray(this.cases)) {
            data["cases"] = [];
            for (let item of this.cases)
                data["cases"].push(item.toJSON());
        }
        if (Array.isArray(this.participants)) {
            data["participants"] = [];
            for (let item of this.participants)
                data["participants"].push(item.toJSON());
        }
        data["hearing_room_name"] = this.hearing_room_name;
        data["other_information"] = this.other_information;
        data["created_date"] = this.created_date ? this.created_date.toISOString() : <any>undefined;
        data["created_by"] = this.created_by;
        data["updated_by"] = this.updated_by;
        data["updated_date"] = this.updated_date ? this.updated_date.toISOString() : <any>undefined;
        data["confirmed_by"] = this.confirmed_by;
        data["confirmed_date"] = this.confirmed_date ? this.confirmed_date.toISOString() : <any>undefined;
        data["status"] = this.status;
        data["questionnaire_not_required"] = this.questionnaire_not_required;
        data["audio_recording_required"] = this.audio_recording_required;
        data["cancel_reason"] = this.cancel_reason;
        if (Array.isArray(this.endpoints)) {
            data["endpoints"] = [];
            for (let item of this.endpoints)
                data["endpoints"].push(item.toJSON());
        }
        data["group_id"] = this.group_id;
        return data; 
    }
}

export interface IHearingDetailsResponse {
    id?: string;
    scheduled_date_time?: Date;
    scheduled_duration?: number;
    hearing_venue_name?: string | undefined;
    case_type_name?: string | undefined;
    hearing_type_name?: string | undefined;
    cases?: CaseResponse[] | undefined;
    participants?: ParticipantResponse[] | undefined;
    hearing_room_name?: string | undefined;
    other_information?: string | undefined;
    created_date?: Date;
    created_by?: string | undefined;
    updated_by?: string | undefined;
    updated_date?: Date;
    confirmed_by?: string | undefined;
    confirmed_date?: Date | undefined;
    status?: BookingStatus;
    questionnaire_not_required?: boolean;
    audio_recording_required?: boolean;
    cancel_reason?: string | undefined;
    endpoints?: EndpointResponse[] | undefined;
    group_id?: string | undefined;
}

export class LinkedParticipantResponse implements ILinkedParticipantResponse {
    linked_id?: string;
    type?: LinkedParticipantType;

    constructor(data?: ILinkedParticipantResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.linked_id = _data["linked_id"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): LinkedParticipantResponse {
        data = typeof data === 'object' ? data : {};
        let result = new LinkedParticipantResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["linked_id"] = this.linked_id;
        data["type"] = this.type;
        return data; 
    }
}

export interface ILinkedParticipantResponse {
    linked_id?: string;
    type?: LinkedParticipantType;
}

export class ParticipantResponse implements IParticipantResponse {
    id?: string;
    display_name?: string | undefined;
    case_role_name?: string | undefined;
    hearing_role_name?: string | undefined;
    user_role_name?: string | undefined;
    title?: string | undefined;
    first_name?: string | undefined;
    middle_names?: string | undefined;
    last_name?: string | undefined;
    contact_email?: string | undefined;
    telephone_number?: string | undefined;
    username?: string | undefined;
    organisation?: string | undefined;
    representee?: string | undefined;
    linked_participants?: LinkedParticipantResponse[] | undefined;

    constructor(data?: IParticipantResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.display_name = _data["display_name"];
            this.case_role_name = _data["case_role_name"];
            this.hearing_role_name = _data["hearing_role_name"];
            this.user_role_name = _data["user_role_name"];
            this.title = _data["title"];
            this.first_name = _data["first_name"];
            this.middle_names = _data["middle_names"];
            this.last_name = _data["last_name"];
            this.contact_email = _data["contact_email"];
            this.telephone_number = _data["telephone_number"];
            this.username = _data["username"];
            this.organisation = _data["organisation"];
            this.representee = _data["representee"];
            if (Array.isArray(_data["linked_participants"])) {
                this.linked_participants = [] as any;
                for (let item of _data["linked_participants"])
                    this.linked_participants!.push(LinkedParticipantResponse.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ParticipantResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ParticipantResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["display_name"] = this.display_name;
        data["case_role_name"] = this.case_role_name;
        data["hearing_role_name"] = this.hearing_role_name;
        data["user_role_name"] = this.user_role_name;
        data["title"] = this.title;
        data["first_name"] = this.first_name;
        data["middle_names"] = this.middle_names;
        data["last_name"] = this.last_name;
        data["contact_email"] = this.contact_email;
        data["telephone_number"] = this.telephone_number;
        data["username"] = this.username;
        data["organisation"] = this.organisation;
        data["representee"] = this.representee;
        if (Array.isArray(this.linked_participants)) {
            data["linked_participants"] = [];
            for (let item of this.linked_participants)
                data["linked_participants"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IParticipantResponse {
    id?: string;
    display_name?: string | undefined;
    case_role_name?: string | undefined;
    hearing_role_name?: string | undefined;
    user_role_name?: string | undefined;
    title?: string | undefined;
    first_name?: string | undefined;
    middle_names?: string | undefined;
    last_name?: string | undefined;
    contact_email?: string | undefined;
    telephone_number?: string | undefined;
    username?: string | undefined;
    organisation?: string | undefined;
    representee?: string | undefined;
    linked_participants?: LinkedParticipantResponse[] | undefined;
}

export class ProblemDetails implements IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    constructor(data?: IProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.title = _data["title"];
            this.status = _data["status"];
            this.detail = _data["detail"];
            this.instance = _data["instance"];
        }
    }

    static fromJS(data: any): ProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        return data; 
    }
}

export interface IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;
}

export class UserDto implements IUserDto {
    id?: string;
    username?: string | undefined;
    contact_email?: string | undefined;
    first_name?: string | undefined;
    last_name?: string | undefined;
    display_name?: string | undefined;
    number?: number;
    test_type?: TestType;
    user_type?: UserType;
    application?: Application;
    is_prod_user?: boolean;
    created_date?: Date;

    constructor(data?: IUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.username = _data["username"];
            this.contact_email = _data["contact_email"];
            this.first_name = _data["first_name"];
            this.last_name = _data["last_name"];
            this.display_name = _data["display_name"];
            this.number = _data["number"];
            this.test_type = _data["test_type"];
            this.user_type = _data["user_type"];
            this.application = _data["application"];
            this.is_prod_user = _data["is_prod_user"];
            this.created_date = _data["created_date"] ? new Date(_data["created_date"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): UserDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["username"] = this.username;
        data["contact_email"] = this.contact_email;
        data["first_name"] = this.first_name;
        data["last_name"] = this.last_name;
        data["display_name"] = this.display_name;
        data["number"] = this.number;
        data["test_type"] = this.test_type;
        data["user_type"] = this.user_type;
        data["application"] = this.application;
        data["is_prod_user"] = this.is_prod_user;
        data["created_date"] = this.created_date ? this.created_date.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IUserDto {
    id?: string;
    username?: string | undefined;
    contact_email?: string | undefined;
    first_name?: string | undefined;
    last_name?: string | undefined;
    display_name?: string | undefined;
    number?: number;
    test_type?: TestType;
    user_type?: UserType;
    application?: Application;
    is_prod_user?: boolean;
    created_date?: Date;
}

export enum Application {
    None = "None",
    AdminWeb = "AdminWeb",
    BookingsApi = "BookingsApi",
    ServiceWeb = "ServiceWeb",
    TestApi = "TestApi",
    UserApi = "UserApi",
    VideoApi = "VideoApi",
    VideoWeb = "VideoWeb",
    QueueSubscriber = "QueueSubscriber",
    TestWeb = "TestWeb",
}

export enum TestType {
    Automated = "Automated",
    Manual = "Manual",
    Performance = "Performance",
    ITHC = "ITHC",
    Demo = "Demo",
}

export enum UserType {
    None = "None",
    CaseAdmin = "CaseAdmin",
    VideoHearingsOfficer = "VideoHearingsOfficer",
    Witness = "Witness",
    Judge = "Judge",
    Individual = "Individual",
    Representative = "Representative",
    Observer = "Observer",
    PanelMember = "PanelMember",
    Winger = "Winger",
    Tester = "Tester",
    Interpreter = "Interpreter",
}

export class AllocateUserRequest implements IAllocateUserRequest {
    application?: Application;
    expiry_in_minutes?: number;
    is_prod_user?: boolean;
    test_type?: TestType;
    user_type?: UserType;
    allocated_by?: string | undefined;

    constructor(data?: IAllocateUserRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.application = _data["application"];
            this.expiry_in_minutes = _data["expiry_in_minutes"];
            this.is_prod_user = _data["is_prod_user"];
            this.test_type = _data["test_type"];
            this.user_type = _data["user_type"];
            this.allocated_by = _data["allocated_by"];
        }
    }

    static fromJS(data: any): AllocateUserRequest {
        data = typeof data === 'object' ? data : {};
        let result = new AllocateUserRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["application"] = this.application;
        data["expiry_in_minutes"] = this.expiry_in_minutes;
        data["is_prod_user"] = this.is_prod_user;
        data["test_type"] = this.test_type;
        data["user_type"] = this.user_type;
        data["allocated_by"] = this.allocated_by;
        return data; 
    }
}

export interface IAllocateUserRequest {
    application?: Application;
    expiry_in_minutes?: number;
    is_prod_user?: boolean;
    test_type?: TestType;
    user_type?: UserType;
    allocated_by?: string | undefined;
}

export class AllocateUsersRequest implements IAllocateUsersRequest {
    application?: Application;
    expiry_in_minutes?: number;
    is_prod_user?: boolean;
    test_type?: TestType;
    user_types?: UserType[] | undefined;
    allocated_by?: string | undefined;

    constructor(data?: IAllocateUsersRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.application = _data["application"];
            this.expiry_in_minutes = _data["expiry_in_minutes"];
            this.is_prod_user = _data["is_prod_user"];
            this.test_type = _data["test_type"];
            if (Array.isArray(_data["user_types"])) {
                this.user_types = [] as any;
                for (let item of _data["user_types"])
                    this.user_types!.push(item);
            }
            this.allocated_by = _data["allocated_by"];
        }
    }

    static fromJS(data: any): AllocateUsersRequest {
        data = typeof data === 'object' ? data : {};
        let result = new AllocateUsersRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["application"] = this.application;
        data["expiry_in_minutes"] = this.expiry_in_minutes;
        data["is_prod_user"] = this.is_prod_user;
        data["test_type"] = this.test_type;
        if (Array.isArray(this.user_types)) {
            data["user_types"] = [];
            for (let item of this.user_types)
                data["user_types"].push(item);
        }
        data["allocated_by"] = this.allocated_by;
        return data; 
    }
}

export interface IAllocateUsersRequest {
    application?: Application;
    expiry_in_minutes?: number;
    is_prod_user?: boolean;
    test_type?: TestType;
    user_types?: UserType[] | undefined;
    allocated_by?: string | undefined;
}

export class CreateHearingRequest implements ICreateHearingRequest {
    audio_recording_required?: boolean;
    application?: Application;
    case_type?: string | undefined;
    created_by?: string | undefined;
    custom_case_name_prefix?: string | undefined;
    endpoints?: number;
    questionnaire_not_required?: boolean;
    scheduled_date_time?: Date;
    test_type?: TestType;
    users?: UserDto[] | undefined;
    venue?: string | undefined;

    constructor(data?: ICreateHearingRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.audio_recording_required = _data["audio_recording_required"];
            this.application = _data["application"];
            this.case_type = _data["case_type"];
            this.created_by = _data["created_by"];
            this.custom_case_name_prefix = _data["custom_case_name_prefix"];
            this.endpoints = _data["endpoints"];
            this.questionnaire_not_required = _data["questionnaire_not_required"];
            this.scheduled_date_time = _data["scheduled_date_time"] ? new Date(_data["scheduled_date_time"].toString()) : <any>undefined;
            this.test_type = _data["test_type"];
            if (Array.isArray(_data["users"])) {
                this.users = [] as any;
                for (let item of _data["users"])
                    this.users!.push(UserDto.fromJS(item));
            }
            this.venue = _data["venue"];
        }
    }

    static fromJS(data: any): CreateHearingRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateHearingRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["audio_recording_required"] = this.audio_recording_required;
        data["application"] = this.application;
        data["case_type"] = this.case_type;
        data["created_by"] = this.created_by;
        data["custom_case_name_prefix"] = this.custom_case_name_prefix;
        data["endpoints"] = this.endpoints;
        data["questionnaire_not_required"] = this.questionnaire_not_required;
        data["scheduled_date_time"] = this.scheduled_date_time ? this.scheduled_date_time.toISOString() : <any>undefined;
        data["test_type"] = this.test_type;
        if (Array.isArray(this.users)) {
            data["users"] = [];
            for (let item of this.users)
                data["users"].push(item.toJSON());
        }
        data["venue"] = this.venue;
        return data; 
    }
}

export interface ICreateHearingRequest {
    audio_recording_required?: boolean;
    application?: Application;
    case_type?: string | undefined;
    created_by?: string | undefined;
    custom_case_name_prefix?: string | undefined;
    endpoints?: number;
    questionnaire_not_required?: boolean;
    scheduled_date_time?: Date;
    test_type?: TestType;
    users?: UserDto[] | undefined;
    venue?: string | undefined;
}

export class DeleteTestHearingDataRequest implements IDeleteTestHearingDataRequest {
    partial_hearing_case_name?: string | undefined;
    limit?: number | undefined;

    constructor(data?: IDeleteTestHearingDataRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.partial_hearing_case_name = _data["partial_hearing_case_name"];
            this.limit = _data["limit"];
        }
    }

    static fromJS(data: any): DeleteTestHearingDataRequest {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteTestHearingDataRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["partial_hearing_case_name"] = this.partial_hearing_case_name;
        data["limit"] = this.limit;
        return data; 
    }
}

export interface IDeleteTestHearingDataRequest {
    partial_hearing_case_name?: string | undefined;
    limit?: number | undefined;
}

export class ResetUserPasswordRequest implements IResetUserPasswordRequest {
    username?: string | undefined;

    constructor(data?: IResetUserPasswordRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.username = _data["username"];
        }
    }

    static fromJS(data: any): ResetUserPasswordRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ResetUserPasswordRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["username"] = this.username;
        return data; 
    }
}

export interface IResetUserPasswordRequest {
    username?: string | undefined;
}

export class UnallocateUsersRequest implements IUnallocateUsersRequest {
    usernames?: string[] | undefined;

    constructor(data?: IUnallocateUsersRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["usernames"])) {
                this.usernames = [] as any;
                for (let item of _data["usernames"])
                    this.usernames!.push(item);
            }
        }
    }

    static fromJS(data: any): UnallocateUsersRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UnallocateUsersRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.usernames)) {
            data["usernames"] = [];
            for (let item of this.usernames)
                data["usernames"].push(item);
        }
        return data; 
    }
}

export interface IUnallocateUsersRequest {
    usernames?: string[] | undefined;
}

export class AllocationDetailsResponse implements IAllocationDetailsResponse {
    id?: string;
    user_id?: string;
    username?: string | undefined;
    expires_at?: Date | undefined;
    allocated?: boolean;
    allocated_by?: string | undefined;

    constructor(data?: IAllocationDetailsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.user_id = _data["user_id"];
            this.username = _data["username"];
            this.expires_at = _data["expires_at"] ? new Date(_data["expires_at"].toString()) : <any>undefined;
            this.allocated = _data["allocated"];
            this.allocated_by = _data["allocated_by"];
        }
    }

    static fromJS(data: any): AllocationDetailsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AllocationDetailsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["user_id"] = this.user_id;
        data["username"] = this.username;
        data["expires_at"] = this.expires_at ? this.expires_at.toISOString() : <any>undefined;
        data["allocated"] = this.allocated;
        data["allocated_by"] = this.allocated_by;
        return data; 
    }
}

export interface IAllocationDetailsResponse {
    id?: string;
    user_id?: string;
    username?: string | undefined;
    expires_at?: Date | undefined;
    allocated?: boolean;
    allocated_by?: string | undefined;
}

export class DeletedResponse implements IDeletedResponse {
    number_of_deleted_hearings?: number;

    constructor(data?: IDeletedResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.number_of_deleted_hearings = _data["number_of_deleted_hearings"];
        }
    }

    static fromJS(data: any): DeletedResponse {
        data = typeof data === 'object' ? data : {};
        let result = new DeletedResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["number_of_deleted_hearings"] = this.number_of_deleted_hearings;
        return data; 
    }
}

export interface IDeletedResponse {
    number_of_deleted_hearings?: number;
}

export class UserDetailsResponse implements IUserDetailsResponse {
    id?: string;
    username?: string | undefined;
    contact_email?: string | undefined;
    first_name?: string | undefined;
    last_name?: string | undefined;
    display_name?: string | undefined;
    number?: number;
    user_type?: UserType;
    application?: Application;
    test_type?: TestType;
    is_prod_user?: boolean;
    created_date?: Date;

    constructor(data?: IUserDetailsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.username = _data["username"];
            this.contact_email = _data["contact_email"];
            this.first_name = _data["first_name"];
            this.last_name = _data["last_name"];
            this.display_name = _data["display_name"];
            this.number = _data["number"];
            this.user_type = _data["user_type"];
            this.application = _data["application"];
            this.test_type = _data["test_type"];
            this.is_prod_user = _data["is_prod_user"];
            this.created_date = _data["created_date"] ? new Date(_data["created_date"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): UserDetailsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new UserDetailsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["username"] = this.username;
        data["contact_email"] = this.contact_email;
        data["first_name"] = this.first_name;
        data["last_name"] = this.last_name;
        data["display_name"] = this.display_name;
        data["number"] = this.number;
        data["user_type"] = this.user_type;
        data["application"] = this.application;
        data["test_type"] = this.test_type;
        data["is_prod_user"] = this.is_prod_user;
        data["created_date"] = this.created_date ? this.created_date.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IUserDetailsResponse {
    id?: string;
    username?: string | undefined;
    contact_email?: string | undefined;
    first_name?: string | undefined;
    last_name?: string | undefined;
    display_name?: string | undefined;
    number?: number;
    user_type?: UserType;
    application?: Application;
    test_type?: TestType;
    is_prod_user?: boolean;
    created_date?: Date;
}

/** Configuration to initialise the UI application */
export class ClientSettingsResponse implements IClientSettingsResponse {
    /** The Azure Tenant Id */
    tenant_id?: string | undefined;
    /** The UI Client Id */
    client_id?: string | undefined;
    /** The Uri to redirect back to after a successful login */
    redirect_uri?: string | undefined;
    /** The Uri to redirect back to after a successful logout */
    post_logout_redirect_uri?: string | undefined;
    /** The uri for the test api */
    test_api_url?: string | undefined;
    /** The application insight instrumentation key */
    app_insights_instrumentation_key?: string | undefined;
    /** The Authority */
    authority?: string | undefined;

    constructor(data?: IClientSettingsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tenant_id = _data["tenant_id"];
            this.client_id = _data["client_id"];
            this.redirect_uri = _data["redirect_uri"];
            this.post_logout_redirect_uri = _data["post_logout_redirect_uri"];
            this.test_api_url = _data["test_api_url"];
            this.app_insights_instrumentation_key = _data["app_insights_instrumentation_key"];
            this.authority = _data["authority"];
        }
    }

    static fromJS(data: any): ClientSettingsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ClientSettingsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenant_id"] = this.tenant_id;
        data["client_id"] = this.client_id;
        data["redirect_uri"] = this.redirect_uri;
        data["post_logout_redirect_uri"] = this.post_logout_redirect_uri;
        data["test_api_url"] = this.test_api_url;
        data["app_insights_instrumentation_key"] = this.app_insights_instrumentation_key;
        data["authority"] = this.authority;
        return data; 
    }
}

/** Configuration to initialise the UI application */
export interface IClientSettingsResponse {
    /** The Azure Tenant Id */
    tenant_id?: string | undefined;
    /** The UI Client Id */
    client_id?: string | undefined;
    /** The Uri to redirect back to after a successful login */
    redirect_uri?: string | undefined;
    /** The Uri to redirect back to after a successful logout */
    post_logout_redirect_uri?: string | undefined;
    /** The uri for the test api */
    test_api_url?: string | undefined;
    /** The application insight instrumentation key */
    app_insights_instrumentation_key?: string | undefined;
    /** The Authority */
    authority?: string | undefined;
}

export class ConferenceResponse implements IConferenceResponse {
    id?: string;
    hearing_ref_id?: string;
    case_name?: string | undefined;
    status?: ConferenceState;
    participants?: ParticipantResponse2[] | undefined;

    constructor(data?: IConferenceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.hearing_ref_id = _data["hearing_ref_id"];
            this.case_name = _data["case_name"];
            this.status = _data["status"];
            if (Array.isArray(_data["participants"])) {
                this.participants = [] as any;
                for (let item of _data["participants"])
                    this.participants!.push(ParticipantResponse2.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ConferenceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ConferenceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["hearing_ref_id"] = this.hearing_ref_id;
        data["case_name"] = this.case_name;
        data["status"] = this.status;
        if (Array.isArray(this.participants)) {
            data["participants"] = [];
            for (let item of this.participants)
                data["participants"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IConferenceResponse {
    id?: string;
    hearing_ref_id?: string;
    case_name?: string | undefined;
    status?: ConferenceState;
    participants?: ParticipantResponse2[] | undefined;
}

export class HearingResponse implements IHearingResponse {
    id?: string;
    case_name?: string | undefined;
    scheduled_date?: Date;

    constructor(data?: IHearingResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.case_name = _data["case_name"];
            this.scheduled_date = _data["scheduled_date"] ? new Date(_data["scheduled_date"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): HearingResponse {
        data = typeof data === 'object' ? data : {};
        let result = new HearingResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["case_name"] = this.case_name;
        data["scheduled_date"] = this.scheduled_date ? this.scheduled_date.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IHearingResponse {
    id?: string;
    case_name?: string | undefined;
    scheduled_date?: Date;
}

export class ParticipantResponse2 implements IParticipantResponse2 {
    display_name?: string | undefined;
    hearing_role?: string | undefined;
    id?: string;
    status?: ParticipantState;
    user_role?: UserRole;
    username?: string | undefined;

    constructor(data?: IParticipantResponse2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.display_name = _data["display_name"];
            this.hearing_role = _data["hearing_role"];
            this.id = _data["id"];
            this.status = _data["status"];
            this.user_role = _data["user_role"];
            this.username = _data["username"];
        }
    }

    static fromJS(data: any): ParticipantResponse2 {
        data = typeof data === 'object' ? data : {};
        let result = new ParticipantResponse2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["display_name"] = this.display_name;
        data["hearing_role"] = this.hearing_role;
        data["id"] = this.id;
        data["status"] = this.status;
        data["user_role"] = this.user_role;
        data["username"] = this.username;
        return data; 
    }
}

export interface IParticipantResponse2 {
    display_name?: string | undefined;
    hearing_role?: string | undefined;
    id?: string;
    status?: ParticipantState;
    user_role?: UserRole;
    username?: string | undefined;
}

export class UserProfileResponse implements IUserProfileResponse {
    role?: string | undefined;
    username?: string | undefined;

    constructor(data?: IUserProfileResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.role = _data["role"];
            this.username = _data["username"];
        }
    }

    static fromJS(data: any): UserProfileResponse {
        data = typeof data === 'object' ? data : {};
        let result = new UserProfileResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["role"] = this.role;
        data["username"] = this.username;
        return data; 
    }
}

export interface IUserProfileResponse {
    role?: string | undefined;
    username?: string | undefined;
}

export class ApplicationVersion implements IApplicationVersion {
    file_version?: string | undefined;
    information_version?: string | undefined;

    constructor(data?: IApplicationVersion) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.file_version = _data["file_version"];
            this.information_version = _data["information_version"];
        }
    }

    static fromJS(data: any): ApplicationVersion {
        data = typeof data === 'object' ? data : {};
        let result = new ApplicationVersion();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["file_version"] = this.file_version;
        data["information_version"] = this.information_version;
        return data; 
    }
}

export interface IApplicationVersion {
    file_version?: string | undefined;
    information_version?: string | undefined;
}

export class HealthCheck implements IHealthCheck {
    successful?: boolean;
    error_message?: string | undefined;
    data?: { [key: string]: any; } | undefined;

    constructor(data?: IHealthCheck) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.successful = _data["successful"];
            this.error_message = _data["error_message"];
            if (_data["data"]) {
                this.data = {} as any;
                for (let key in _data["data"]) {
                    if (_data["data"].hasOwnProperty(key))
                        this.data![key] = _data["data"][key];
                }
            }
        }
    }

    static fromJS(data: any): HealthCheck {
        data = typeof data === 'object' ? data : {};
        let result = new HealthCheck();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["successful"] = this.successful;
        data["error_message"] = this.error_message;
        if (this.data) {
            data["data"] = {};
            for (let key in this.data) {
                if (this.data.hasOwnProperty(key))
                    data["data"][key] = this.data[key];
            }
        }
        return data; 
    }
}

export interface IHealthCheck {
    successful?: boolean;
    error_message?: string | undefined;
    data?: { [key: string]: any; } | undefined;
}

export class HealthCheckResponse implements IHealthCheckResponse {
    test_api_health?: HealthCheck;
    app_version?: ApplicationVersion;

    constructor(data?: IHealthCheckResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.test_api_health = _data["test_api_health"] ? HealthCheck.fromJS(_data["test_api_health"]) : <any>undefined;
            this.app_version = _data["app_version"] ? ApplicationVersion.fromJS(_data["app_version"]) : <any>undefined;
        }
    }

    static fromJS(data: any): HealthCheckResponse {
        data = typeof data === 'object' ? data : {};
        let result = new HealthCheckResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["test_api_health"] = this.test_api_health ? this.test_api_health.toJSON() : <any>undefined;
        data["app_version"] = this.app_version ? this.app_version.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IHealthCheckResponse {
    test_api_health?: HealthCheck;
    app_version?: ApplicationVersion;
}

export class UpdateUserResponse implements IUpdateUserResponse {
    new_password?: string | undefined;

    constructor(data?: IUpdateUserResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.new_password = _data["new_password"];
        }
    }

    static fromJS(data: any): UpdateUserResponse {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateUserResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["new_password"] = this.new_password;
        return data; 
    }
}

export interface IUpdateUserResponse {
    new_password?: string | undefined;
}

export enum ConferenceState {
    NotStarted = "NotStarted",
    InSession = "InSession",
    Paused = "Paused",
    Suspended = "Suspended",
    Closed = "Closed",
}

export enum EndpointState {
    NotYetJoined = "NotYetJoined",
    Connected = "Connected",
    Disconnected = "Disconnected",
    InConsultation = "InConsultation",
}

export enum EventType {
    None = "None",
    Joined = "Joined",
    Disconnected = "Disconnected",
    Transfer = "Transfer",
    Help = "Help",
    Pause = "Pause",
    Close = "Close",
    Leave = "Leave",
    Consultation = "Consultation",
    MediaPermissionDenied = "MediaPermissionDenied",
    ParticipantJoining = "ParticipantJoining",
    SelfTestFailed = "SelfTestFailed",
    Suspend = "Suspend",
    VhoCall = "VhoCall",
    ParticipantNotSignedIn = "ParticipantNotSignedIn",
    Start = "Start",
    CountdownFinished = "CountdownFinished",
    EndpointJoined = "EndpointJoined",
    EndpointDisconnected = "EndpointDisconnected",
    EndpointTransfer = "EndpointTransfer",
    ConnectingToEventHub = "ConnectingToEventHub",
    SelectingMedia = "SelectingMedia",
    ConnectingToConference = "ConnectingToConference",
}

export enum LinkedParticipantType2 {
    Interpreter = "Interpreter",
}

export enum ParticipantState {
    None = "None",
    NotSignedIn = "NotSignedIn",
    Joining = "Joining",
    Available = "Available",
    InHearing = "InHearing",
    InConsultation = "InConsultation",
    Disconnected = "Disconnected",
}

export enum UserRole {
    None = "None",
    CaseAdmin = "CaseAdmin",
    VideoHearingsOfficer = "VideoHearingsOfficer",
    HearingFacilitationSupport = "HearingFacilitationSupport",
    Judge = "Judge",
    Individual = "Individual",
    Representative = "Representative",
    JudicialOfficeHolder = "JudicialOfficeHolder",
}

export class ConferenceEventRequest implements IConferenceEventRequest {
    event_id?: string | undefined;
    event_type?: EventType;
    time_stamp_utc?: Date;
    conference_id?: string | undefined;
    participant_id?: string | undefined;
    participant_room_id?: string | undefined;
    transfer_from?: string | undefined;
    transfer_to?: string | undefined;
    reason?: string | undefined;
    phone?: string | undefined;

    constructor(data?: IConferenceEventRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.event_id = _data["event_id"];
            this.event_type = _data["event_type"];
            this.time_stamp_utc = _data["time_stamp_utc"] ? new Date(_data["time_stamp_utc"].toString()) : <any>undefined;
            this.conference_id = _data["conference_id"];
            this.participant_id = _data["participant_id"];
            this.participant_room_id = _data["participant_room_id"];
            this.transfer_from = _data["transfer_from"];
            this.transfer_to = _data["transfer_to"];
            this.reason = _data["reason"];
            this.phone = _data["phone"];
        }
    }

    static fromJS(data: any): ConferenceEventRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ConferenceEventRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["event_id"] = this.event_id;
        data["event_type"] = this.event_type;
        data["time_stamp_utc"] = this.time_stamp_utc ? this.time_stamp_utc.toISOString() : <any>undefined;
        data["conference_id"] = this.conference_id;
        data["participant_id"] = this.participant_id;
        data["participant_room_id"] = this.participant_room_id;
        data["transfer_from"] = this.transfer_from;
        data["transfer_to"] = this.transfer_to;
        data["reason"] = this.reason;
        data["phone"] = this.phone;
        return data; 
    }
}

export interface IConferenceEventRequest {
    event_id?: string | undefined;
    event_type?: EventType;
    time_stamp_utc?: Date;
    conference_id?: string | undefined;
    participant_id?: string | undefined;
    participant_room_id?: string | undefined;
    transfer_from?: string | undefined;
    transfer_to?: string | undefined;
    reason?: string | undefined;
    phone?: string | undefined;
}

export class CivilianRoomResponse implements ICivilianRoomResponse {
    id?: number;
    label?: string | undefined;
    participants?: string[] | undefined;

    constructor(data?: ICivilianRoomResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.label = _data["label"];
            if (Array.isArray(_data["participants"])) {
                this.participants = [] as any;
                for (let item of _data["participants"])
                    this.participants!.push(item);
            }
        }
    }

    static fromJS(data: any): CivilianRoomResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CivilianRoomResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["label"] = this.label;
        if (Array.isArray(this.participants)) {
            data["participants"] = [];
            for (let item of this.participants)
                data["participants"].push(item);
        }
        return data; 
    }
}

export interface ICivilianRoomResponse {
    id?: number;
    label?: string | undefined;
    participants?: string[] | undefined;
}

export class ConferenceDetailsResponse implements IConferenceDetailsResponse {
    id?: string;
    hearing_id?: string;
    scheduled_date_time?: Date;
    started_date_time?: Date | undefined;
    closed_date_time?: Date | undefined;
    case_type?: string | undefined;
    case_number?: string | undefined;
    case_name?: string | undefined;
    scheduled_duration?: number;
    current_status?: ConferenceState;
    participants?: ParticipantDetailsResponse[] | undefined;
    endpoints?: EndpointResponse2[] | undefined;
    meeting_room?: MeetingRoomResponse;
    hearing_venue_name?: string | undefined;
    audio_recording_required?: boolean;
    civilian_rooms?: CivilianRoomResponse[] | undefined;

    constructor(data?: IConferenceDetailsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.hearing_id = _data["hearing_id"];
            this.scheduled_date_time = _data["scheduled_date_time"] ? new Date(_data["scheduled_date_time"].toString()) : <any>undefined;
            this.started_date_time = _data["started_date_time"] ? new Date(_data["started_date_time"].toString()) : <any>undefined;
            this.closed_date_time = _data["closed_date_time"] ? new Date(_data["closed_date_time"].toString()) : <any>undefined;
            this.case_type = _data["case_type"];
            this.case_number = _data["case_number"];
            this.case_name = _data["case_name"];
            this.scheduled_duration = _data["scheduled_duration"];
            this.current_status = _data["current_status"];
            if (Array.isArray(_data["participants"])) {
                this.participants = [] as any;
                for (let item of _data["participants"])
                    this.participants!.push(ParticipantDetailsResponse.fromJS(item));
            }
            if (Array.isArray(_data["endpoints"])) {
                this.endpoints = [] as any;
                for (let item of _data["endpoints"])
                    this.endpoints!.push(EndpointResponse2.fromJS(item));
            }
            this.meeting_room = _data["meeting_room"] ? MeetingRoomResponse.fromJS(_data["meeting_room"]) : <any>undefined;
            this.hearing_venue_name = _data["hearing_venue_name"];
            this.audio_recording_required = _data["audio_recording_required"];
            if (Array.isArray(_data["civilian_rooms"])) {
                this.civilian_rooms = [] as any;
                for (let item of _data["civilian_rooms"])
                    this.civilian_rooms!.push(CivilianRoomResponse.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ConferenceDetailsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ConferenceDetailsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["hearing_id"] = this.hearing_id;
        data["scheduled_date_time"] = this.scheduled_date_time ? this.scheduled_date_time.toISOString() : <any>undefined;
        data["started_date_time"] = this.started_date_time ? this.started_date_time.toISOString() : <any>undefined;
        data["closed_date_time"] = this.closed_date_time ? this.closed_date_time.toISOString() : <any>undefined;
        data["case_type"] = this.case_type;
        data["case_number"] = this.case_number;
        data["case_name"] = this.case_name;
        data["scheduled_duration"] = this.scheduled_duration;
        data["current_status"] = this.current_status;
        if (Array.isArray(this.participants)) {
            data["participants"] = [];
            for (let item of this.participants)
                data["participants"].push(item.toJSON());
        }
        if (Array.isArray(this.endpoints)) {
            data["endpoints"] = [];
            for (let item of this.endpoints)
                data["endpoints"].push(item.toJSON());
        }
        data["meeting_room"] = this.meeting_room ? this.meeting_room.toJSON() : <any>undefined;
        data["hearing_venue_name"] = this.hearing_venue_name;
        data["audio_recording_required"] = this.audio_recording_required;
        if (Array.isArray(this.civilian_rooms)) {
            data["civilian_rooms"] = [];
            for (let item of this.civilian_rooms)
                data["civilian_rooms"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IConferenceDetailsResponse {
    id?: string;
    hearing_id?: string;
    scheduled_date_time?: Date;
    started_date_time?: Date | undefined;
    closed_date_time?: Date | undefined;
    case_type?: string | undefined;
    case_number?: string | undefined;
    case_name?: string | undefined;
    scheduled_duration?: number;
    current_status?: ConferenceState;
    participants?: ParticipantDetailsResponse[] | undefined;
    endpoints?: EndpointResponse2[] | undefined;
    meeting_room?: MeetingRoomResponse;
    hearing_venue_name?: string | undefined;
    audio_recording_required?: boolean;
    civilian_rooms?: CivilianRoomResponse[] | undefined;
}

export class EndpointResponse2 implements IEndpointResponse2 {
    id?: string;
    display_name?: string | undefined;
    sip_address?: string | undefined;
    pin?: string | undefined;
    status?: EndpointState;
    defence_advocate?: string | undefined;
    current_room?: RoomResponse;

    constructor(data?: IEndpointResponse2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.display_name = _data["display_name"];
            this.sip_address = _data["sip_address"];
            this.pin = _data["pin"];
            this.status = _data["status"];
            this.defence_advocate = _data["defence_advocate"];
            this.current_room = _data["current_room"] ? RoomResponse.fromJS(_data["current_room"]) : <any>undefined;
        }
    }

    static fromJS(data: any): EndpointResponse2 {
        data = typeof data === 'object' ? data : {};
        let result = new EndpointResponse2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["display_name"] = this.display_name;
        data["sip_address"] = this.sip_address;
        data["pin"] = this.pin;
        data["status"] = this.status;
        data["defence_advocate"] = this.defence_advocate;
        data["current_room"] = this.current_room ? this.current_room.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IEndpointResponse2 {
    id?: string;
    display_name?: string | undefined;
    sip_address?: string | undefined;
    pin?: string | undefined;
    status?: EndpointState;
    defence_advocate?: string | undefined;
    current_room?: RoomResponse;
}

export class LinkedParticipantResponse2 implements ILinkedParticipantResponse2 {
    linked_id?: string;
    type?: LinkedParticipantType2;

    constructor(data?: ILinkedParticipantResponse2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.linked_id = _data["linked_id"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): LinkedParticipantResponse2 {
        data = typeof data === 'object' ? data : {};
        let result = new LinkedParticipantResponse2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["linked_id"] = this.linked_id;
        data["type"] = this.type;
        return data; 
    }
}

export interface ILinkedParticipantResponse2 {
    linked_id?: string;
    type?: LinkedParticipantType2;
}

export class MeetingRoomResponse implements IMeetingRoomResponse {
    admin_uri?: string | undefined;
    judge_uri?: string | undefined;
    participant_uri?: string | undefined;
    pexip_node?: string | undefined;
    pexip_self_test_node?: string | undefined;
    telephone_conference_id?: string | undefined;

    constructor(data?: IMeetingRoomResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.admin_uri = _data["admin_uri"];
            this.judge_uri = _data["judge_uri"];
            this.participant_uri = _data["participant_uri"];
            this.pexip_node = _data["pexip_node"];
            this.pexip_self_test_node = _data["pexip_self_test_node"];
            this.telephone_conference_id = _data["telephone_conference_id"];
        }
    }

    static fromJS(data: any): MeetingRoomResponse {
        data = typeof data === 'object' ? data : {};
        let result = new MeetingRoomResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["admin_uri"] = this.admin_uri;
        data["judge_uri"] = this.judge_uri;
        data["participant_uri"] = this.participant_uri;
        data["pexip_node"] = this.pexip_node;
        data["pexip_self_test_node"] = this.pexip_self_test_node;
        data["telephone_conference_id"] = this.telephone_conference_id;
        return data; 
    }
}

export interface IMeetingRoomResponse {
    admin_uri?: string | undefined;
    judge_uri?: string | undefined;
    participant_uri?: string | undefined;
    pexip_node?: string | undefined;
    pexip_self_test_node?: string | undefined;
    telephone_conference_id?: string | undefined;
}

export class ParticipantDetailsResponse implements IParticipantDetailsResponse {
    id?: string;
    ref_id?: string;
    name?: string | undefined;
    first_name?: string | undefined;
    last_name?: string | undefined;
    contact_email?: string | undefined;
    contact_telephone?: string | undefined;
    display_name?: string | undefined;
    username?: string | undefined;
    user_role?: UserRole;
    case_type_group?: string | undefined;
    hearing_role?: string | undefined;
    representee?: string | undefined;
    current_status?: ParticipantState;
    current_room?: RoomResponse;
    linked_participants?: LinkedParticipantResponse2[] | undefined;

    constructor(data?: IParticipantDetailsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.ref_id = _data["ref_id"];
            this.name = _data["name"];
            this.first_name = _data["first_name"];
            this.last_name = _data["last_name"];
            this.contact_email = _data["contact_email"];
            this.contact_telephone = _data["contact_telephone"];
            this.display_name = _data["display_name"];
            this.username = _data["username"];
            this.user_role = _data["user_role"];
            this.case_type_group = _data["case_type_group"];
            this.hearing_role = _data["hearing_role"];
            this.representee = _data["representee"];
            this.current_status = _data["current_status"];
            this.current_room = _data["current_room"] ? RoomResponse.fromJS(_data["current_room"]) : <any>undefined;
            if (Array.isArray(_data["linked_participants"])) {
                this.linked_participants = [] as any;
                for (let item of _data["linked_participants"])
                    this.linked_participants!.push(LinkedParticipantResponse2.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ParticipantDetailsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ParticipantDetailsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["ref_id"] = this.ref_id;
        data["name"] = this.name;
        data["first_name"] = this.first_name;
        data["last_name"] = this.last_name;
        data["contact_email"] = this.contact_email;
        data["contact_telephone"] = this.contact_telephone;
        data["display_name"] = this.display_name;
        data["username"] = this.username;
        data["user_role"] = this.user_role;
        data["case_type_group"] = this.case_type_group;
        data["hearing_role"] = this.hearing_role;
        data["representee"] = this.representee;
        data["current_status"] = this.current_status;
        data["current_room"] = this.current_room ? this.current_room.toJSON() : <any>undefined;
        if (Array.isArray(this.linked_participants)) {
            data["linked_participants"] = [];
            for (let item of this.linked_participants)
                data["linked_participants"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IParticipantDetailsResponse {
    id?: string;
    ref_id?: string;
    name?: string | undefined;
    first_name?: string | undefined;
    last_name?: string | undefined;
    contact_email?: string | undefined;
    contact_telephone?: string | undefined;
    display_name?: string | undefined;
    username?: string | undefined;
    user_role?: UserRole;
    case_type_group?: string | undefined;
    hearing_role?: string | undefined;
    representee?: string | undefined;
    current_status?: ParticipantState;
    current_room?: RoomResponse;
    linked_participants?: LinkedParticipantResponse2[] | undefined;
}

export class RoomResponse implements IRoomResponse {
    id?: number;
    label?: string | undefined;
    locked?: boolean;

    constructor(data?: IRoomResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.label = _data["label"];
            this.locked = _data["locked"];
        }
    }

    static fromJS(data: any): RoomResponse {
        data = typeof data === 'object' ? data : {};
        let result = new RoomResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["label"] = this.label;
        data["locked"] = this.locked;
        return data; 
    }
}

export interface IRoomResponse {
    id?: number;
    label?: string | undefined;
    locked?: boolean;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}